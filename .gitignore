# Logs
logs
*.log
npm-debug.log*

# Dependency directory
node_modules
**/node_modules/**
_node_modules
**/build/**
_build
buidl
.pnp.cjs

# Coverage directory used by tools like istanbul
coverage

.tmp
_docpress

dist
tsconfig.tsbuildinfo

# Visual Studio Code configs
.vscode/

# JetBrains IDEs
.idea/

# pnpm uses npm for publishing a new version with
# dependencies bundled but the npm lockfile is not needed
# because pnpm use pnpm for installation
package-lock.json

__package_previews__
.store

privatePackages/store

## Verdaccio storage
storage

yarn.lock

RELEASE.md

.jest-cache
.verdaccio-cache
.turbo

## custom modules-dir fixture
__fixtures__/custom-modules-dir/**/fake_modules/
__fixtures__/custom-modules-dir/cache/
__fixtures__/custom-modules-dir/patches/

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Next.js build output
.next

packages/test-example

# local env files
.env*.local
.env

.nx/cache
.vercel
